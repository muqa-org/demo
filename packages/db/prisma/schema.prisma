// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection

}

model User {
  id                String    @id @default(cuid())
  address           String?   @unique @map("address")
  email             String?   @unique
  password          String?
  firstName         String?   @map("first_name")
  lastName          String?   @map("last_name")
  accounts          Account[]
  sessions          Session[]
  authNonce         AuthNonce?
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @default(now()) @map(name: "updated_at")

  @@map("user")
}

model Account {
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model AuthNonce {
  userId    String   @unique @map("user_id")
  nonce     String
  expiresAt DateTime @map(name: "expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_nonce")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires  DateTime @map(name: "expires_at")

  @@unique([identifier, token])
  @@map("verification_token")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}


model RoundPhase {
  id          String       @id @default(cuid())
  title       String    @unique
  startDate   DateTime  @map(name: "start_date")
  endDate     DateTime  @map(name: "end_date")

  @@map("round_phase")
}
